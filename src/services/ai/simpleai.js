import emailService from "../email/mailservice.js";
import AIService from "./openai.js"; 

class SimpleAI {
  static lgpdTerms = {
    message:
      "üìú *Termo de Consentimento para Uso de Chatbot - Head Systems*\n\n" +
      "1. **Introdu√ß√£o**\n" +
      "Este Termo de Consentimento tem como objetivo esclarecer os direitos e responsabilidades dos usu√°rios ao interagir com o chatbot da Head Systems, em conformidade com a Lei Geral de Prote√ß√£o de Dados Pessoais (LGPD - Lei n¬∫ 13.709/2018).\n\n" +
      "2. **Coleta e Tratamento de Dados**\n" +
      "Ao utilizar o chatbot da Head Systems, o usu√°rio declara estar ciente de que alguns dados pessoais podem ser coletados, incluindo, mas n√£o se limitando a:\n" +
      "- Nome completo;\n" +
      "- Endere√ßo de e-mail;\n" +
      "- N√∫mero de telefone;\n" +
      "- Outras informa√ß√µes fornecidas voluntariamente pelo usu√°rio durante a intera√ß√£o.\n\n" +
      "Os dados coletados ser√£o utilizados exclusivamente para:\n" +
      "- Melhorar a experi√™ncia do usu√°rio no atendimento;\n" +
      "- Fornecer respostas adequadas e personalizadas;\n" +
      "- Atendimento e suporte t√©cnico;\n" +
      "- An√°lise e melhoria dos servi√ßos prestados.\n\n" +
      "3. **Compartilhamento de Dados**\n" +
      "A Head Systems n√£o vender√°, ceder√° ou compartilhar√° os dados coletados com terceiros sem o devido consentimento, salvo nos seguintes casos:\n" +
      "- Quando exigido por lei ou ordem judicial;\n" +
      "- Para cumprimento de obriga√ß√µes legais e regulat√≥rias;\n" +
      "- Com prestadores de servi√ßo necess√°rios para o funcionamento do chatbot, que tamb√©m estar√£o sujeitos √† LGPD.\n\n" +
      "4. **Armazenamento e Seguran√ßa**\n" +
      "Os dados ser√£o armazenados de maneira segura, seguindo padr√µes adequados de prote√ß√£o contra acessos n√£o autorizados, vazamentos ou outros incidentes de seguran√ßa.\n\n" +
      "5. **Direitos do Usu√°rio**\n" +
      "Nos termos da LGPD, o usu√°rio tem direito a:\n" +
      "- Confirmar a exist√™ncia de tratamento de dados pessoais;\n" +
      "- Acessar seus dados pessoais armazenados;\n" +
      "- Solicitar a corre√ß√£o de dados incompletos, inexatos ou desatualizados;\n" +
      "- Requerer a exclus√£o dos seus dados pessoais, salvo quando houver necessidade de reten√ß√£o por motivos legais;\n" +
      "- Revogar este consentimento a qualquer momento.\n\n" +
      "Para exercer esses direitos, o usu√°rio pode entrar em contato pelo e-mail [contato@headsystems.com.br].\n\n" +
      "6. **Consentimento**\n" +
      "Ao utilizar o chatbot da Head Systems, o usu√°rio declara estar ciente e de acordo com os termos estabelecidos neste documento. Caso n√£o concorde com o tratamento de seus dados, o usu√°rio pode optar por n√£o utilizar o servi√ßo.\n\n" +
      "7. **Altera√ß√µes no Termo de Consentimento**\n" +
      "A Head Systems reserva-se o direito de atualizar este termo sempre que necess√°rio para manter a conformidade com a legisla√ß√£o vigente. O usu√°rio ser√° informado sobre altera√ß√µes relevantes.\n\n" +
      "8. **Contato**\n" +
      "Para d√∫vidas, solicita√ß√µes ou reclama√ß√µes relacionadas ao tratamento de dados pessoais, o usu√°rio pode entrar em contato pelo e-mail [contato@headsystems.com.br].\n\n" +
      'Digite *"ACEITAR"* para concordar e continuar.',
    options: ["ACEITAR"],
  };

  static mainMenu = {
    message:
      "üëã *Bem-vindo(a) √† Head Systems!* \n" +
      "*Solu√ß√µes inovadoras em TI para transformar seu neg√≥cio!*\n\n" +
      "*Nossas Especialidades:*\n" +
      "‚ñ´Ô∏è Gest√£o Completa de TI\n" +
      "‚ñ´Ô∏è Virtualiza√ß√£o de Servidores/Desktops\n" +
      "‚ñ´Ô∏è Seguran√ßa Cibern√©tica\n" +
      "‚ñ´Ô∏è Gerenciamento de Dispositivos (MDM)\n" +
      "‚ñ´Ô∏è Infraestrutura em Nuvem\n\n" +
      "üìå *Como posso ajudar?*\n\n" +
      " 1Ô∏è‚É£ `Falar com especialista`- *Time Head*\n" +
      " 2Ô∏è‚É£ `Servi√ßos`- *Conhecer detalhes*\n" +
      " 3Ô∏è‚É£ `FAQ`- *Tire d√∫vidas r√°pidas*\n" +
      " 4Ô∏è‚É£ `Agendar`- *Reuni√£o t√©cnica*\n" +
      " 5Ô∏è‚É£ `Sobre`- *Nossa hist√≥ria*\n" +
      " 6Ô∏è‚É£ `Contato`- *Canais diretos*\n" +
      " 7Ô∏è‚É£ `Sair`- *Encerrar atendimento*\n" +
      " 8Ô∏è‚É£ `Falar com a IA`- *Tirar d√∫vidas e simular or√ßamentos*\n\n" + // Nova op√ß√£o 8
      "üî¢ *Digite o n√∫mero correspondente √† op√ß√£o desejada:*",

    options: ["1", "2", "3", "4", "5", "6", "7", "8"], // Adicionado "8" √†s op√ß√µes
  };

  static servicesMenu = {
    message:
      "üè¢ Aqui est√£o os principais servi√ßos que a *Head Systems* oferece:\n\n" +
      "üîπ *Gest√£o Completa de TI*: Suporte t√©cnico especializado e administra√ß√£o de infraestrutura de TI.\n" +
      "üîπ *Virtualiza√ß√£o de Servidores e Desktops*: Solu√ß√µes para otimiza√ß√£o de recursos e redu√ß√£o de custos.\n" +
      "üîπ *Seguran√ßa da Informa√ß√£o*: Prote√ß√£o de dados, backup gerenciado e conformidade com a LGPD.\n" +
      "üîπ *Gerenciamento de Dispositivos M√≥veis*: Monitoramento e controle de dispositivos corporativos.\n" +
      "üîπ *Cloud Computing*: Solu√ß√µes em nuvem para escalabilidade e flexibilidade.\n" +
      "üîπ *Consultoria em TI*: Planejamento estrat√©gico e implementa√ß√£o de solu√ß√µes tecnol√≥gicas.\n" +
      "üîπ *Infraestrutura de Redes*: Projetos, implanta√ß√£o e manuten√ß√£o de redes corporativas.\n\n" +
      "Digite *menu* para voltar ao in√≠cio.",
    options: ["menu"],
  };

  static faqMenu = {
    message:
      "‚ÑπÔ∏è *Perguntas Frequentes (FAQ)*:\n\n" +
      "Como funciona o suporte de TI?\n" +
      "Quais benef√≠cios das solu√ß√µes de virtualiza√ß√£o?\n" +
      "Como a Head Systems ajuda com a LGPD?\n" +
      "Digite *menu* para voltar ao in√≠cio.\n" +
      "Para saber todas essas informa√ß√µes, acesse nosso site: https://headsystems.com.br\n\n",
    options: ["menu"],
  };

  static aboutUsMenu = {
    message:
      "üìñ *Sobre N√≥s*:\n\n" +
      "A *Head Systems* √© uma empresa especializada em solu√ß√µes de TI, oferecendo servi√ßos de outsourcing, virtualiza√ß√£o, seguran√ßa da informa√ß√£o e desenvolvimento de software. Nossa miss√£o √© fornecer solu√ß√µes tecnol√≥gicas inovadoras que atendam √†s necessidades dos nossos clientes.\n\n" +
      "Digite *menu* para voltar ao in√≠cio.",
    options: ["menu"],
  };

  static contactMenu = {
    message:
      "üìû *Contato*:\n\n" +
      "üìß E-mail: contato@headsystems.com.br\n" +
      "üìû Telefone: (31) 3772-0172\n" +
      "üåê Site: https://headsystems.com.br\n\n" +
      "Digite *menu* para voltar ao in√≠cio.",
    options: ["menu"],
  };

  constructor() {
    this.state = "welcome"; // Estado inicial: mensagem de boas-vindas
    this.schedulingData = {};
    this.currentStep = 0;
    this.lastMeetingDetails = null;
    this.awaitingSpecialist = false;
    this.termsAccepted = false; // Flag de aceita√ß√£o dos termos
    this.inactivityTimer = null; // Timer para verificar ociosidade
  }

  async processMessage(message) {
    if (!message || typeof message !== "string") {
      return {
        message: "‚ùå Mensagem inv√°lida. Por favor, tente novamente.",
        complete: false,
      };
    }

    const text = message.toLowerCase().trim();

    // Reiniciar o timer de ociosidade
    this.resetInactivityTimer();

    // Handle global 'menu' command
    if (text === "menu") {
      this.resetState();
      return { message: SimpleAI.mainMenu.message, complete: false };
    }

    // Caso o usu√°rio n√£o envie texto v√°lido
    if (!text)
      return { message: this.getCurrentStateMessage(), complete: false };

    // Fluxo principal
    switch (this.state) {
      case "welcome":
        return this.handleWelcomeFlow(text);
      case "terms":
        return this.handleLGPDTerms(text);
      case "main":
        return await this.handleMainFlow(text); // Adicionado await aqui
      case "scheduling":
        return this.handleSchedulingFlow(text);
      case "ia_interaction": // Novo estado para intera√ß√£o com a IA
        return await this.handleIAInteraction(text);
      default:
        return { message: "‚ùå Erro no fluxo. Digite *menu*.", complete: false };
    }
  }

  // ======================================
  // Fluxo de Boas-Vindas
  // ======================================
  handleWelcomeFlow(text) {
    if (text === "iniciar") {
      this.state = "terms";
      return {
        message: SimpleAI.lgpdTerms.message,
        complete: false,
      };
    } else {
      return {
        message:
          "üëã Ol√°! Eu sou o assistente virtual da *Head Systems*.\n\n" +
          'Antes de come√ßarmos, digite *"iniciar"* para prosseguir.',
        complete: false,
      };
    }
  }

  // ======================================
  // Fluxo de Aceita√ß√£o dos Termos LGPD
  handleLGPDTerms(text) {
    if (text === "aceitar") {
      this.termsAccepted = true;
      this.state = "main";
      return {
        message:
          "‚úÖ Termos aceitos! Como posso ajudar?\n\n" +
          SimpleAI.mainMenu.message,
        complete: false,
      };
    } else {
      return {
        message:
          '‚ùå Voc√™ precisa aceitar os termos para continuar. Digite *"aceitar"*.',
        complete: false,
      };
    }
  }

  // ======================================
  // Fluxo Principal do Chatbot
  // ======================================
  async handleMainFlow(text) { // Adicionado async aqui
    if (text === "menu") {
      this.resetState();
      return { message: SimpleAI.mainMenu.message, complete: false };
    }

    switch (text) {
      case "1":
        this.awaitingSpecialist = true;
        return {
          message: "üîî Buscando especialistas dispon√≠veis...",
          complete: false,
        };
      case "2":
        this.state = "services";
        return { message: SimpleAI.servicesMenu.message, complete: false };
      case "3":
        this.state = "faq";
        return { message: SimpleAI.faqMenu.message, complete: false };
      case "4":
        this.state = "scheduling";
        this.currentStep = 1;
        return {
          message:
            "üë§ Por favor, informe seu nome completo:\n\n Ou Digite *Menu* para voltar ao Menu Principal.",
          complete: false,
        };
      case "5":
        this.state = "about";
        return { message: SimpleAI.aboutUsMenu.message, complete: false };
      case "6":
        this.state = "contact";
        return { message: SimpleAI.contactMenu.message, complete: false };
      case "7":
        this.resetState();
        return {
          message: "üëã Atendimento encerrado. Volte sempre!",
          complete: false,
        };
      case "8": // Nova op√ß√£o para falar com a IA
        this.state = "ia_interaction";
        return {
          message:
            "ü§ñ Voc√™ escolheu falar com a IA. Eu posso ajudar com d√∫vidas t√©cnicas, simular or√ßamentos e muito mais!\n\n" +
            "Por favor, descreva sua d√∫vida ou solicita√ß√£o:",
          complete: false,
        };
      default:
        return { message: SimpleAI.mainMenu.message, complete: false };
    }
  }

  // ======================================
  // Fluxo de Intera√ß√£o com a IA
  // ======================================
  async handleIAInteraction(text) {
    if (text === "menu") {
        this.resetState();
        return { message: SimpleAI.mainMenu.message, complete: false };
    }

    console.log("Prompt enviado para a IA:", text);

    const prompt = `Voc√™ √© um assistente virtual da Head Systems, uma empresa especializada em solu√ß√µes de TI. 
    Responda de forma clara e profissional. O cliente perguntou: "${text}". 
    Se for uma d√∫vida t√©cnica, explique de forma simples. Se for uma solicita√ß√£o de or√ßamento, pe√ßa mais detalhes para simular o or√ßamento.`;

    try {
        const generatedText = await AIService.generateText(prompt);
        console.log("Resposta gerada pela IA:", generatedText);
        return { message: generatedText, complete: false };
    } catch (error) {
        console.error("Erro ao gerar texto com IA:", error);
        return { message: "‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde.", complete: false };
    }
}

  // ======================================
  // Fluxo de Agendamento
  // ======================================
  async handleSchedulingFlow(text) {
    switch (this.currentStep) {
      case 1: // Nome
        this.schedulingData.name = text;
        this.currentStep = 2;
        return { message: "üìÖ Informe a data (DD/MM/AAAA):", complete: false };

      case 2: // Data
        if (!this.isValidDate(text)) {
          return {
            message: "‚ùå Formato inv√°lido. Use DD/MM/AAAA:",
            complete: false,
          };
        }
        this.schedulingData.date = text;
        this.currentStep = 3;
        return { message: "‚è∞ Informe o hor√°rio (HH:MM):", complete: false };

      case 3: // Hor√°rio
        if (!this.isValidTime(text)) {
          return {
            message: "‚ùå Hor√°rio inv√°lido. Use HH:MM:",
            complete: false,
          };
        }
        this.schedulingData.time = text;
        this.currentStep = 4;
        return { message: "üìß Informe seu e-mail:", complete: false };

      case 4: // E-mail
        if (!this.isValidEmail(text)) {
          return {
            message: "‚ùå E-mail inv√°lido. Tente novamente:",
            complete: false,
          };
        }
        this.schedulingData.email = text;
        this.currentStep = 5;
        return {
          message: "üìù Descreva o assunto da reuni√£o:",
          complete: false,
        };

      case 5: // Confirma√ß√£o
        this.schedulingData.subject = text;
        return this.confirmScheduling();

      default:
        this.resetState();
        return {
          message: "‚ùå Erro no agendamento. Digite *menu*.",
          complete: false,
        };
    }
  }

  async confirmScheduling() {
    try {
      await emailService.sendMeetingConfirmation(
        this.schedulingData,
        this.schedulingData.email
      );
    } catch (error) {
      console.error("Erro no envio do email:", error);
    }

    this.lastMeetingDetails = { ...this.schedulingData };
    this.resetState();

    return {
      message:
        "‚úÖ Agendamento confirmado! Sua reuni√£o foi marcada com sucesso e enviada para o Gestor de TI.",
      complete: true,
      meetingDetails: this.lastMeetingDetails,
    };
  }

  // ======================================
  // Utilit√°rios
  // ======================================
  isValidDate(date) {
    return /^\d{2}\/\d{2}\/\d{4}$/.test(date);
  }

  isValidTime(time) {
    return /^([01]\d|2[0-3]):[0-5]\d$/.test(time);
  }

  isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  resetState() {
    this.state = "main";
    this.currentStep = 0;
    this.schedulingData = {};
    this.awaitingSpecialist = false;
    this.termsAccepted = false;
    this.clearInactivityTimer();
  }

  // ======================================
  // Timer de Ociosidade
  // ======================================
  resetInactivityTimer() {
    this.clearInactivityTimer();
    this.inactivityTimer = setTimeout(() => {
      this.resetState();
      console.log("‚è∞ Usu√°rio ocioso por 30 minutos. Estado da conversa resetado.");
    }, 30 * 60 * 1000); // 30 minutos em milissegundos
  }

  clearInactivityTimer() {
    if (this.inactivityTimer) {
      clearTimeout(this.inactivityTimer);
      this.inactivityTimer = null;
    }
  }
}

export default SimpleAI;


